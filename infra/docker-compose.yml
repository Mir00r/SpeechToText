version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18
    container_name: speechtotext-postgres
    environment:
      POSTGRES_DB: speechtotext
      POSTGRES_USER: speechtotext
      POSTGRES_PASSWORD: speechtotext123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U speechtotext -d speechtotext"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - speechtotext-network

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: speechtotext-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - speechtotext-network

  # MinIO client for bucket creation
  minio-client:
    image: minio/mc:latest
    container_name: speechtotext-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb minio/speechtotext --ignore-existing;
      mc policy set public minio/speechtotext;
      echo 'MinIO bucket created successfully';
      "
    networks:
      - speechtotext-network

  # Spring Boot API Service
  api-service:
    build:
      context: ../
      dockerfile: services/api-service/Dockerfile
    container_name: speechtotext-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/speechtotext
      DATABASE_USERNAME: speechtotext
      DATABASE_PASSWORD: speechtotext123
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: speechtotext
      TRANSCRIPTION_SERVICE_URL: http://transcription-service:8081
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-client:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - speechtotext-network
    volumes:
      - ./logs:/app/logs

  # Python Transcription Service
  transcription-service:
    build:
      context: ../services/transcription-service
      dockerfile: Dockerfile
    container_name: speechtotext-transcription
    environment:
      PORT: 8081
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: speechtotext
      ENVIRONMENT: production
      # GPU support (uncomment if GPU available)
      # CUDA_VISIBLE_DEVICES: 0
    ports:
      - "8081:8081"
    depends_on:
      minio:
        condition: service_healthy
      minio-client:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - speechtotext-network
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Prometheus (optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: speechtotext-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - speechtotext-network
    profiles:
      - monitoring

  # Grafana (optional - for monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: speechtotext-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - speechtotext-network
    profiles:
      - monitoring

networks:
  speechtotext-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  prometheus_data:
  grafana_data:
