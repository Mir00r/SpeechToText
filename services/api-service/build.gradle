plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.23.3'
}

description = 'Speech to Text API Service'

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // For WebClient

    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Object Mapping
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // AWS S3 (MinIO compatible)
    implementation 'software.amazon.awssdk:s3:2.21.29'

    // HTTP Client
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'

    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'

    // Circuit Breaker and Resilience
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    
    // Structured Logging for JSON output
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:minio:1.19.1'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    // Spring Test for MockMultipartFile in health checks
    implementation 'org.springframework:spring-test'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Annotation Processing
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

bootJar {
    archiveFileName = 'api-service.jar'
}

// ========================================
// TESTING CONFIGURATION
// ========================================

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    finalizedBy jacocoTestReport
}

// Integration Tests
task integrationTest(type: Test) {
    useJUnitPlatform()
    include '**/integration/**'
    systemProperty 'spring.profiles.active', 'test'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

check.dependsOn integrationTest

// ========================================
// CODE COVERAGE
// ========================================

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test
    executionData fileTree(dir: "${buildDir}/jacoco", includes: ["*.exec"])
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/dto/**',
                '**/entity/**', 
                '**/config/**',
                '**/Application.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }
}

// ========================================
// CODE FORMATTING
// ========================================

spotless {
    java {
        googleJavaFormat('1.19.1')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
