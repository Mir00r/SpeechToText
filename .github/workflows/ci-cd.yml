name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api-service
  IMAGE_NAME_TRANSCRIPTION: ${{ github.repository }}/transcription-service

jobs:
  # ========================================
  # JAVA API SERVICE TESTS & BUILD
  # ========================================
  java-tests:
    name: Java Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew :services:api-service:test --continue
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Run integration tests
        run: ./gradlew :services:api-service:integrationTest --continue
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate test report
        run: ./gradlew :services:api-service:jacocoTestReport

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: java-test-results
          path: |
            services/api-service/build/reports/tests/
            services/api-service/build/reports/jacoco/

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: services/api-service/build/test-results/**/*.xml

      - name: Code coverage report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: services/api-service/build/reports/jacoco/test/jacocoTestReport.xml
          coverage_report_name: Coverage
          coverage_report_title: API Service Coverage
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 75
          fail_below_threshold: false

  # ========================================
  # PYTHON TRANSCRIPTION SERVICE TESTS
  # ========================================
  python-tests:
    name: Python Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/transcription-service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: services/transcription-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black isort flake8 safety bandit

      - name: Code formatting check
        working-directory: services/transcription-service
        run: |
          black --check .
          isort --check-only .

      - name: Lint with flake8
        working-directory: services/transcription-service
        run: |
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Security check with bandit
        working-directory: services/transcription-service
        run: bandit -r app -f json -o bandit-report.json || true

      - name: Safety check for dependencies
        working-directory: services/transcription-service
        run: safety check --json --output safety-report.json || true

      - name: Run tests with pytest
        working-directory: services/transcription-service
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=70 \
            --junitxml=pytest-report.xml

      - name: Upload Python test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-test-results
          path: |
            services/transcription-service/pytest-report.xml
            services/transcription-service/htmlcov/
            services/transcription-service/coverage.xml
            services/transcription-service/bandit-report.json
            services/transcription-service/safety-report.json

      - name: Publish Python test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: services/transcription-service/pytest-report.xml

  # ========================================
  # SECURITY SCANS
  # ========================================
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: [java-tests, python-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: java, python

  # ========================================
  # DOCKER BUILDS
  # ========================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [java-tests, python-tests]
    if: github.event_name != 'pull_request'
    
    outputs:
      api-image-digest: ${{ steps.build-api.outputs.digest }}
      transcription-image-digest: ${{ steps.build-transcription.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API service
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for Transcription service
        id: meta-transcription
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TRANSCRIPTION }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push API service image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./services/api-service
          file: ./services/api-service/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Transcription service image  
        id: build-transcription
        uses: docker/build-push-action@v5
        with:
          context: ./services/transcription-service
          file: ./services/transcription-service/Dockerfile
          push: true
          tags: ${{ steps.meta-transcription.outputs.tags }}
          labels: ${{ steps.meta-transcription.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ========================================
  # INTEGRATION TESTS (END-TO-END)
  # ========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker --version
          docker-compose --version

      - name: Start services with Docker Compose
        working-directory: infra
        run: |
          # Use built images from registry
          export API_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}"
          export TRANSCRIPTION_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TRANSCRIPTION }}:${{ github.sha }}"
          docker-compose up -d --wait
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c '
            until curl -f http://localhost:8080/actuator/health; do
              echo "Waiting for API service..."
              sleep 5
            done
            until curl -f http://localhost:8081/health; do
              echo "Waiting for Transcription service..."  
              sleep 5
            done
          '

      - name: Run integration tests
        run: |
          # Test API health
          curl -f http://localhost:8080/actuator/health
          
          # Test transcription service health
          curl -f http://localhost:8081/health
          
          # Test basic upload (with dummy file)
          echo "test audio content" > test.wav
          response=$(curl -s -X POST \
            -F "file=@test.wav" \
            -F "language=en" \
            -F "sync=false" \
            http://localhost:8080/api/v1/transcriptions)
          echo "Upload response: $response"
          
          # Extract job ID and check status  
          job_id=$(echo $response | jq -r '.id // empty')
          if [[ -n "$job_id" ]]; then
            curl -f "http://localhost:8080/api/v1/transcriptions/$job_id"
          fi

      - name: Collect container logs
        if: always()
        run: |
          mkdir -p logs
          docker-compose -f infra/docker-compose.yml logs > logs/docker-compose.log

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: logs/

      - name: Stop services
        if: always()
        working-directory: infra
        run: docker-compose down -v

  # ========================================
  # DEPLOYMENT (Production)
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy notification
        run: |
          echo "🚀 Deploying Speech-to-Text Service v${{ github.event.release.tag_name }}"
          echo "API Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.event.release.tag_name }}"
          echo "Transcription Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TRANSCRIPTION }}:${{ github.event.release.tag_name }}"

      # Add your deployment steps here:
      # - Deploy to Kubernetes
      # - Update cloud services  
      # - Run smoke tests
      # - Send notifications

  # ========================================
  # CLEANUP
  # ========================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.event_name == 'release'
    
    steps:
      - name: Delete old packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: api-service
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true

      - name: Delete old transcription packages  
        uses: actions/delete-package-versions@v4
        with:
          package-name: transcription-service
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
